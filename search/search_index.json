{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution Reorder\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nThe \nsiddhi-execution-reorder extension\n is a \nSiddhi\n extension that orders out-of-order event arrivals using algorithms such as K-Slack and alpha K-Stack.\n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\n\n\nVersions 5.x and above with group id \nio.siddhi.extension.*\n from \nhere\n.\n\n\nVersions 4.x and lower with group id \norg.wso2.extension.siddhi.*\n from \nhere\n.\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n5.0.2\n.\n\n\nFeatures\n\n\n\n\nakslack\n \n(\nStream Processor\n)\n \nStream processor performs reordering of out-of-order events optimized for a givenparameter using \nAQ-K-Slack algorithm\n. This is best for reordering events on attributes those are used for aggregations.data .\n\n\nkslack\n \n(\nStream Processor\n)\n \nStream processor performs reordering of out-of-order events using \nK-Slack algorithm\n.\n\n\n\n\nDependencies\n\n\nThere are no other dependencies needed for this extension. \n\n\nInstallation\n\n\nFor installing this extension on various siddhi execution environments refer Siddhi documentation section on \nadding extensions\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Information"
        }, 
        {
            "location": "/#siddhi-execution-reorder", 
            "text": "The  siddhi-execution-reorder extension  is a  Siddhi  extension that orders out-of-order event arrivals using algorithms such as K-Slack and alpha K-Stack.  For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Siddhi Execution Reorder"
        }, 
        {
            "location": "/#download", 
            "text": "Versions 5.x and above with group id  io.siddhi.extension.*  from  here .  Versions 4.x and lower with group id  org.wso2.extension.siddhi.*  from  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  5.0.2 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "akslack   ( Stream Processor )   Stream processor performs reordering of out-of-order events optimized for a givenparameter using  AQ-K-Slack algorithm . This is best for reordering events on attributes those are used for aggregations.data .  kslack   ( Stream Processor )   Stream processor performs reordering of out-of-order events using  K-Slack algorithm .", 
            "title": "Features"
        }, 
        {
            "location": "/#dependencies", 
            "text": "There are no other dependencies needed for this extension.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#installation", 
            "text": "For installing this extension on various siddhi execution environments refer Siddhi documentation section on  adding extensions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v5.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nStream processor performs reordering of out-of-order events optimized for a givenparameter using \nAQ-K-Slack algorithm\n. This is best for reordering events on attributes those are used for aggregations.data .\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe event timestamp on which the events should be ordered.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nBy monitoring the changes in this field Alpha K-Slack dynamically optimises its behavior. This field is used to calculate the runtime window coverage threshold, which represents the upper limit set for unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. This should be greater than or equal to 15.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nA timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second.\n\n        \n-1\n (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum K-Slack window threshold ('K' parameter).\n\n        \n9,223,372,036,854,775,807\n (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.late.arrival\n\n        \nIf set to \ntrue\n the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. \n\n        \n0.03\n (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm.\n\n        \n0.95\n (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:akslack(eventTime, volume, 20)#window.time(5 min)\nselect eventTime, symbol, sum(volume) as total\ninsert into OutputStream;\n\n\n\n\nThe query reorders events based on the 'eventTime' attribute value and optimises for aggregating 'volume' attribute considering last 20 events.\n\n\n\nkslack \n(Stream Processor)\n\n\nStream processor performs reordering of out-of-order events using \nK-Slack algorithm\n.\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout)\nreorder:kslack(\nLONG\n timestamp, \nBOOL\n discard.late.arrival)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nLONG\n max.k)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nBOOL\n discard.late.arrival)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe event timestamp on which the events should be ordered.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nA timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second.\n\n        \n-1\n (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum K-Slack window threshold ('K' parameter).\n\n        \n9,223,372,036,854,775,807\n (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.late.arrival\n\n        \nIf set to \ntrue\n the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:kslack(eventTime, 5000)\nselect eventTime, symbol, volume\ninsert into OutputStream;\n\n\n\n\nThe query reorders events based on the 'eventTime' attribute value, and it forcefully flushes all the events who have arrived older than the given 'timeout' value (\n5000\n milliseconds) every second.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v502", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.2"
        }, 
        {
            "location": "/api/latest/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/latest/#akslack-stream-processor", 
            "text": "Stream processor performs reordering of out-of-order events optimized for a givenparameter using  AQ-K-Slack algorithm . This is best for reordering events on attributes those are used for aggregations.data .  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The event timestamp on which the events should be ordered. \n         \n         LONG \n         No \n         Yes \n     \n     \n         correlation.field \n         By monitoring the changes in this field Alpha K-Slack dynamically optimises its behavior. This field is used to calculate the runtime window coverage threshold, which represents the upper limit set for unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         Yes \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. This should be greater than or equal to 15. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timeout \n         A timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second. \n         -1  (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum K-Slack window threshold ('K' parameter). \n         9,223,372,036,854,775,807  (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.late.arrival \n         If set to  true  the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm.  \n         0.03  (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. \n         0.95  (95%) \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:akslack(eventTime, volume, 20)#window.time(5 min)\nselect eventTime, symbol, sum(volume) as total\ninsert into OutputStream;  The query reorders events based on the 'eventTime' attribute value and optimises for aggregating 'volume' attribute considering last 20 events.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#kslack-stream-processor", 
            "text": "Stream processor performs reordering of out-of-order events using  K-Slack algorithm .  Syntax  reorder:kslack( LONG  timestamp)\nreorder:kslack( LONG  timestamp,  LONG  timeout)\nreorder:kslack( LONG  timestamp,  BOOL  discard.late.arrival)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  LONG  max.k)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  BOOL  discard.late.arrival)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The event timestamp on which the events should be ordered. \n         \n         LONG \n         No \n         Yes \n     \n     \n         timeout \n         A timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second. \n         -1  (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum K-Slack window threshold ('K' parameter). \n         9,223,372,036,854,775,807  (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.late.arrival \n         If set to  true  the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:kslack(eventTime, 5000)\nselect eventTime, symbol, volume\ninsert into OutputStream;  The query reorders events based on the 'eventTime' attribute value, and it forcefully flushes all the events who have arrived older than the given 'timeout' value ( 5000  milliseconds) every second.", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.2/", 
            "text": "API Docs - v5.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nStream processor performs reordering of out-of-order events optimized for a givenparameter using \nAQ-K-Slack algorithm\n. This is best for reordering events on attributes those are used for aggregations.data .\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival)\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe event timestamp on which the events should be ordered.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nBy monitoring the changes in this field Alpha K-Slack dynamically optimises its behavior. This field is used to calculate the runtime window coverage threshold, which represents the upper limit set for unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. This should be greater than or equal to 15.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nA timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second.\n\n        \n-1\n (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum K-Slack window threshold ('K' parameter).\n\n        \n9,223,372,036,854,775,807\n (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.late.arrival\n\n        \nIf set to \ntrue\n the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. \n\n        \n0.03\n (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm.\n\n        \n0.95\n (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:akslack(eventTime, volume, 20)#window.time(5 min)\nselect eventTime, symbol, sum(volume) as total\ninsert into OutputStream;\n\n\n\n\nThe query reorders events based on the 'eventTime' attribute value and optimises for aggregating 'volume' attribute considering last 20 events.\n\n\n\nkslack \n(Stream Processor)\n\n\nStream processor performs reordering of out-of-order events using \nK-Slack algorithm\n.\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout)\nreorder:kslack(\nLONG\n timestamp, \nBOOL\n discard.late.arrival)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nLONG\n max.k)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nBOOL\n discard.late.arrival)\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timeout, \nLONG\n max.k, \nBOOL\n discard.late.arrival)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe event timestamp on which the events should be ordered.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nA timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second.\n\n        \n-1\n (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum K-Slack window threshold ('K' parameter).\n\n        \n9,223,372,036,854,775,807\n (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.late.arrival\n\n        \nIf set to \ntrue\n the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:kslack(eventTime, 5000)\nselect eventTime, symbol, volume\ninsert into OutputStream;\n\n\n\n\nThe query reorders events based on the 'eventTime' attribute value, and it forcefully flushes all the events who have arrived older than the given 'timeout' value (\n5000\n milliseconds) every second.", 
            "title": "5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#api-docs-v502", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/5.0.2/#akslack-stream-processor", 
            "text": "Stream processor performs reordering of out-of-order events optimized for a givenparameter using  AQ-K-Slack algorithm . This is best for reordering events on attributes those are used for aggregations.data .  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival)\nreorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The event timestamp on which the events should be ordered. \n         \n         LONG \n         No \n         Yes \n     \n     \n         correlation.field \n         By monitoring the changes in this field Alpha K-Slack dynamically optimises its behavior. This field is used to calculate the runtime window coverage threshold, which represents the upper limit set for unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         Yes \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. This should be greater than or equal to 15. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timeout \n         A timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second. \n         -1  (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum K-Slack window threshold ('K' parameter). \n         9,223,372,036,854,775,807  (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.late.arrival \n         If set to  true  the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm.  \n         0.03  (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. \n         0.95  (95%) \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:akslack(eventTime, volume, 20)#window.time(5 min)\nselect eventTime, symbol, sum(volume) as total\ninsert into OutputStream;  The query reorders events based on the 'eventTime' attribute value and optimises for aggregating 'volume' attribute considering last 20 events.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.2/#kslack-stream-processor", 
            "text": "Stream processor performs reordering of out-of-order events using  K-Slack algorithm .  Syntax  reorder:kslack( LONG  timestamp)\nreorder:kslack( LONG  timestamp,  LONG  timeout)\nreorder:kslack( LONG  timestamp,  BOOL  discard.late.arrival)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  LONG  max.k)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  BOOL  discard.late.arrival)\nreorder:kslack( LONG  timestamp,  LONG  timeout,  LONG  max.k,  BOOL  discard.late.arrival)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The event timestamp on which the events should be ordered. \n         \n         LONG \n         No \n         Yes \n     \n     \n         timeout \n         A timeout value in milliseconds, where the buffered events who are older than the given timeout period get flushed every second. \n         -1  (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum K-Slack window threshold ('K' parameter). \n         9,223,372,036,854,775,807  (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.late.arrival \n         If set to  true  the processor would discarded the out-of-order events arriving later than the K-Slack window, and in otherwise it allows the late arrivals to proceed. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream StockStream (eventTime long, symbol string, volume long);\n\n@info(name = 'query1')\nfrom StockStream#reorder:kslack(eventTime, 5000)\nselect eventTime, symbol, volume\ninsert into OutputStream;  The query reorders events based on the 'eventTime' attribute value, and it forcefully flushes all the events who have arrived older than the given 'timeout' value ( 5000  milliseconds) every second.", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.1/", 
            "text": "API Docs - v5.0.1\n\n\n\n\nTested Siddhi Core version: \n5.0.0\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#api-docs-v501", 
            "text": "Tested Siddhi Core version:  5.0.0  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/5.0.1/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.1/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.0/", 
            "text": "API Docs - v5.0.0\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#api-docs-v500", 
            "text": "", 
            "title": "API Docs - v5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/5.0.0/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.0/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.2/", 
            "text": "API Docs - v4.2.2\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.2.2"
        }, 
        {
            "location": "/api/4.2.2/#api-docs-v422", 
            "text": "", 
            "title": "API Docs - v4.2.2"
        }, 
        {
            "location": "/api/4.2.2/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.2.2/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.2/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.1/", 
            "text": "API Docs - v4.2.1\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.2.1"
        }, 
        {
            "location": "/api/4.2.1/#api-docs-v421", 
            "text": "", 
            "title": "API Docs - v4.2.1"
        }, 
        {
            "location": "/api/4.2.1/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.2.1/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.1/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.0/", 
            "text": "API Docs - v4.2.0\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.2.0"
        }, 
        {
            "location": "/api/4.2.0/#api-docs-v420", 
            "text": "", 
            "title": "API Docs - v4.2.0"
        }, 
        {
            "location": "/api/4.2.0/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.2.0/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.0/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.1/", 
            "text": "API Docs - v4.1.1\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an event stream which is out of order.\nIt implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in \n'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nThis corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals.\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen.\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThis is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nThe error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'.\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nThe confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'.\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nThe timestamp based on which the reordering is performed.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nThe fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nThe maximum threshold value assigned for 'K' parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nThe flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not.\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nThe error threshold value set for Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nThe confidence level set for the Alpha K-Slack algorithm.\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm which is originally described in \n'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThis is the attribute used for ordering the events.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nThis corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for 'K' parameter in the K-Slack algorithm.\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nThis indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#api-docs-v411", 
            "text": "", 
            "title": "API Docs - v4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.1.1/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an event stream which is out of order. It implements the AQ-K-Slack based out-of-order handling algorithm which is originally described in  'http://dl.acm.org/citation.cfm?doid=2675743.2771828'.  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         This corresponds to the data field of which the accuracy directly gets affected, by the adaptive operation of the Alpha K-Slack extension. This field is used to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals. \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter 'batch.size' denotes the number of events that should be considered in the calculation of an alpha value. It should be a value which should be greater than or equal to fifteen. \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time out value in milliseconds, which is set at the beginning of the process. Once the time out value expires, the extension drains out all the events that are buffered within the reorder extension. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         This is the maximum threshold value for 'K' parameter in the Alpha K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should be discarded or not. When this value is set to 'true', the events are discarded. \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         The error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'confidenceLevel'. \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         The confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with 'errorThreshold'. \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         The timestamp based on which the reordering is performed. \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals. \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value. \n         LONG \n     \n     \n         beta3 \n         The fixed time-out value in milliseconds assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         The maximum threshold value assigned for 'K' parameter. \n         LONG \n     \n     \n         beta5 \n         The flag set to indicate whether the out-of-order events which arrive after buffer eviction are to be discarded or not. \n         BOOL \n     \n     \n         beta6 \n         The error threshold value set for Alpha K-Slack algorithm. \n         DOUBLE \n     \n     \n         beta7 \n         The confidence level set for the Alpha K-Slack algorithm. \n         DOUBLE \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom InputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size.", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.1/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm which is originally described in  'https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf'.)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         This is the attribute used for ordering the events. \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         This corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains out all the events that are buffered within the reorder extension. The time-out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for 'K' parameter in the K-Slack algorithm. \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         This indicates whether the out-of-order events which appear after the expiration of the K-slack window should be discarded or not. When this value is set to 'true', the events would get discarded. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom InputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into OutputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.0/", 
            "text": "API Docs - v4.1.0\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the AQ-K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nINT|FLOAT|LONG|DOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nINT\nFLOAT\nLONG\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nTimestamp based on which the reordering is performed\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nFixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nMaximum threshold value assigned for K parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nFlag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nError threshold value set for Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nConfidence level set for the Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#api-docs-v410", 
            "text": "", 
            "title": "API Docs - v4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.1.0/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the AQ-K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  reorder:akslack( LONG  timestamp,  INT|FLOAT|LONG|DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         INT FLOAT LONG DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         Timestamp based on which the reordering is performed \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value \n         LONG \n     \n     \n         beta3 \n         Fixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         Maximum threshold value assigned for K parameter. \n         LONG \n     \n     \n         beta5 \n         Flag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not \n         BOOL \n     \n     \n         beta6 \n         Error threshold value set for Alpha K-Slack algorithm \n         DOUBLE \n     \n     \n         beta7 \n         Confidence level set for the Alpha K-Slack algorithm \n         DOUBLE \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.0/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.23/", 
            "text": "API Docs - v4.0.23\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the AQ-K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nDOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nTimestamp based on which the reordering is performed\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nFixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nMaximum threshold value assigned for K parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nFlag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nError threshold value set for Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nConfidence level set for the Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.0.23"
        }, 
        {
            "location": "/api/4.0.23/#api-docs-v4023", 
            "text": "", 
            "title": "API Docs - v4.0.23"
        }, 
        {
            "location": "/api/4.0.23/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.0.23/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the AQ-K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  reorder:akslack( LONG  timestamp,  DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         Timestamp based on which the reordering is performed \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value \n         LONG \n     \n     \n         beta3 \n         Fixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         Maximum threshold value assigned for K parameter. \n         LONG \n     \n     \n         beta5 \n         Flag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not \n         BOOL \n     \n     \n         beta6 \n         Error threshold value set for Alpha K-Slack algorithm \n         DOUBLE \n     \n     \n         beta7 \n         Confidence level set for the Alpha K-Slack algorithm \n         DOUBLE \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.23/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.22/", 
            "text": "API Docs - v4.0.22\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the AQ-K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nDOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nTimestamp based on which the reordering is performed\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nFixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nMaximum threshold value assigned for K parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nFlag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nError threshold value set for Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nConfidence level set for the Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.0.22"
        }, 
        {
            "location": "/api/4.0.22/#api-docs-v4022", 
            "text": "", 
            "title": "API Docs - v4.0.22"
        }, 
        {
            "location": "/api/4.0.22/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.0.22/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the AQ-K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  reorder:akslack( LONG  timestamp,  DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         Timestamp based on which the reordering is performed \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value \n         LONG \n     \n     \n         beta3 \n         Fixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         Maximum threshold value assigned for K parameter. \n         LONG \n     \n     \n         beta5 \n         Flag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not \n         BOOL \n     \n     \n         beta6 \n         Error threshold value set for Alpha K-Slack algorithm \n         DOUBLE \n     \n     \n         beta7 \n         Confidence level set for the Alpha K-Slack algorithm \n         DOUBLE \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.22/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.21/", 
            "text": "API Docs - v4.0.21\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the AQ-K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nDOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nTimestamp based on which the reordering is performed\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nFixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nMaximum threshold value assigned for K parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nFlag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nError threshold value set for Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nConfidence level set for the Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#api-docs-v4021", 
            "text": "", 
            "title": "API Docs - v4.0.21"
        }, 
        {
            "location": "/api/4.0.21/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.0.21/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the AQ-K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  reorder:akslack( LONG  timestamp,  DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         Timestamp based on which the reordering is performed \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value \n         LONG \n     \n     \n         beta3 \n         Fixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         Maximum threshold value assigned for K parameter. \n         LONG \n     \n     \n         beta5 \n         Flag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not \n         BOOL \n     \n     \n         beta6 \n         Error threshold value set for Alpha K-Slack algorithm \n         DOUBLE \n     \n     \n         beta7 \n         Confidence level set for the Alpha K-Slack algorithm \n         DOUBLE \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.21/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.20/", 
            "text": "API Docs - v4.0.20\n\n\nReorder\n\n\nakslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the AQ-K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nreorder:akslack(\nLONG\n timestamp, \nDOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \nbeta0\n\n        \nTimestamp based on which the reordering is performed\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta1\n\n        \nAn upper limit value assigned for the unsuccessfully handled late arrivals\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta2\n\n        \nThe number of events that should be considered in the calculation of an alpha value\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta3\n\n        \nFixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta4\n\n        \nMaximum threshold value assigned for K parameter.\n\n        \nLONG\n\n    \n\n    \n\n        \nbeta5\n\n        \nFlag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not\n\n        \nBOOL\n\n    \n\n    \n\n        \nbeta6\n\n        \nError threshold value set for Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n    \n\n        \nbeta7\n\n        \nConfidence level set for the Alpha K-Slack algorithm\n\n        \nDOUBLE\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size\n\n\n\nkslack \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nreorder:kslack(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#api-docs-v4020", 
            "text": "", 
            "title": "API Docs - v4.0.20"
        }, 
        {
            "location": "/api/4.0.20/#reorder", 
            "text": "", 
            "title": "Reorder"
        }, 
        {
            "location": "/api/4.0.20/#akslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the AQ-K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  reorder:akslack( LONG  timestamp,  DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the Alpha K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         beta0 \n         Timestamp based on which the reordering is performed \n         LONG \n     \n     \n         beta1 \n         An upper limit value assigned for the unsuccessfully handled late arrivals \n         DOUBLE \n     \n     \n         beta2 \n         The number of events that should be considered in the calculation of an alpha value \n         LONG \n     \n     \n         beta3 \n         Fixed time-out value (in milliseconds) assigned for flushing all the events buffered inside the extension. \n         LONG \n     \n     \n         beta4 \n         Maximum threshold value assigned for K parameter. \n         LONG \n     \n     \n         beta5 \n         Flag set to indicate whether out-of-order events which arrive after buffer eviction to be discarded or not \n         BOOL \n     \n     \n         beta6 \n         Error threshold value set for Alpha K-Slack algorithm \n         DOUBLE \n     \n     \n         beta7 \n         Confidence level set for the Alpha K-Slack algorithm \n         DOUBLE \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, 20 represents the batch size", 
            "title": "akslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.20/#kslack-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  reorder:kslack( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not. When this value is set to true, the events would get discarded \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. In this example, the timeout value is set to 1000 milliseconds", 
            "title": "kslack (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/", 
            "text": "API Docs - v4.0.6\n\n\nKslack\n\n\nreorder \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the K-Slack based out-of-order handling algorithm (originally described in \nhttps://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)\n\n\n\nSyntax\n\n\nkslack:reorder(\nLONG\n timestamp, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000L)\nselect eventtt, price, volume\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. The timeout value is set to 1000 milliseconds\n\n\n\nAkslack\n\n\nreorder \n(Stream Processor)\n\n\nThis stream processor extension performs reordering of an out-of-order event stream.\nIt implements the Alpha K-Slack based out-of-order handling algorithm (originally described in \nhttp://dl.acm.org/citation.cfm?doid=2675743.2771828)\n\n\n\nSyntax\n\n\nakslack:reorder(\nLONG\n timestamp, \nDOUBLE\n correlation.field, \nLONG\n batch.size, \nLONG\n timer.timeout, \nLONG\n max.k, \nBOOL\n discard.flag, \nDOUBLE\n error.threshold, \nDOUBLE\n confidence.level)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nAttribute used for used for ordering the events\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncorrelation.field\n\n        \nCorresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.size\n\n        \nThe parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15\n\n        \n10,000\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimer.timeout\n\n        \nCorresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks.\n\n        \n-1 (timeout is infinite)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmax.k\n\n        \nThe maximum threshold value for K parameter in the Alpha K-Slack algorithm\n\n        \n9,223,372,036,854,775,807 (The maximum Long value)\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndiscard.flag\n\n        \nIndicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nerror.threshold\n\n        \nError threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel\n\n        \n0.03 (3%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence.level\n\n        \nConfidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold\n\n        \n0.95 (95%)\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20l)\nselect eventtt, data\ninsert into outputStream;\n\n\n\n\nThis query performs reordering based on the 'eventtt' attribute values. The batch size applied here is 20.", 
            "title": "4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#api-docs-v406", 
            "text": "", 
            "title": "API Docs - v4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#kslack", 
            "text": "", 
            "title": "Kslack"
        }, 
        {
            "location": "/api/4.0.6/#reorder-stream-processor", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the K-Slack based out-of-order handling algorithm (originally described in  https://www2.informatik.uni-erlangen.de/publication/download/IPDPS2013.pdf)  Syntax  kslack:reorder( LONG  timestamp,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the K-slack window should get discarded or not \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long, price long, volume long);\n@info(name = 'query1')\nfrom inputStream#reorder:kslack(eventtt, 1000L)\nselect eventtt, price, volume\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. The timeout value is set to 1000 milliseconds", 
            "title": "reorder (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.6/#akslack", 
            "text": "", 
            "title": "Akslack"
        }, 
        {
            "location": "/api/4.0.6/#reorder-stream-processor_1", 
            "text": "This stream processor extension performs reordering of an out-of-order event stream. It implements the Alpha K-Slack based out-of-order handling algorithm (originally described in  http://dl.acm.org/citation.cfm?doid=2675743.2771828)  Syntax  akslack:reorder( LONG  timestamp,  DOUBLE  correlation.field,  LONG  batch.size,  LONG  timer.timeout,  LONG  max.k,  BOOL  discard.flag,  DOUBLE  error.threshold,  DOUBLE  confidence.level)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         Attribute used for used for ordering the events \n         \n         LONG \n         No \n         No \n     \n     \n         correlation.field \n         Corresponds to the data field of which the accuracy directly gets affected by the adaptive operation of the K-Slack extension. This field is used by the Alpha K-Slack to calculate the runtime window coverage threshold which is an upper limit set for the unsuccessfully handled late arrivals \n         \n         DOUBLE \n         No \n         No \n     \n     \n         batch.size \n         The parameter batch.size denotes the number of events that should be considered in the calculation of an alpha value. batch.size should be a value which should be greater than or equals to 15 \n         10,000 \n         LONG \n         Yes \n         No \n     \n     \n         timer.timeout \n         Corresponds to a fixed time-out value in milliseconds, which is set at the beginning of the process. Once the time-out value expires, the extension drains all the events that are buffered within the reorder extension to outside. The time out has been implemented internally using a timer. The events buffered within the extension are released each time the timer ticks. \n         -1 (timeout is infinite) \n         LONG \n         Yes \n         No \n     \n     \n         max.k \n         The maximum threshold value for K parameter in the Alpha K-Slack algorithm \n         9,223,372,036,854,775,807 (The maximum Long value) \n         LONG \n         Yes \n         No \n     \n     \n         discard.flag \n         Indicates whether the out-of-order events which appear after the expiration of the Alpha K-slack window should get discarded or not \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         error.threshold \n         Error threshold to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with confidenceLevel \n         0.03 (3%) \n         DOUBLE \n         Yes \n         No \n     \n     \n         confidence.level \n         Confidence level to be applied in Alpha K-Slack algorithm. This parameter must be defined simultaneously with errorThreshold \n         0.95 (95%) \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (eventtt long,data double);\n@info(name = 'query1')\nfrom inputStream#reorder:akslack(eventtt, data, 20l)\nselect eventtt, data\ninsert into outputStream;  This query performs reordering based on the 'eventtt' attribute values. The batch size applied here is 20.", 
            "title": "reorder (Stream Processor)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2019 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}